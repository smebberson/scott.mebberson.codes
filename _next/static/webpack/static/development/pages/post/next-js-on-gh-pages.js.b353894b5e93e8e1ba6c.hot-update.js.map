{"version":3,"file":"static/webpack/static/development/pages/post/next-js-on-gh-pages.js.b353894b5e93e8e1ba6c.hot-update.js","sources":["webpack:///./pages/post/next-js-on-gh-pages.js"],"sourcesContent":["import { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport bash from 'react-syntax-highlighter/dist/languages/prism/bash';\nimport prism from 'react-syntax-highlighter/dist/styles/prism/prism';\n\nimport withPostProps from '../../lib/with-post-props';\nimport Bonus from '../../components/Bonus';\nimport External from '../../components/External';\nimport Inline from '../../components/Inline';\nimport Post from '../../components/Post';\n\nSyntaxHighlighter.registerLanguage('bash', bash);\n\nconst setupOut = `# Remove files from the out directory\n$ rm -rf ./out/\n\n# Exclude the out directory from Git\n$ echo \"out/\" >> .gitignore\n$ git add .\n$ git commit -m \"Ignore the out directory.\"\n\n# Create an orphan branch named gh-pages\n$ git checkout --orphan gh-pages\n\n# Remove all staged files\n$ git rm -rf .\n\n# Create an empty commit (remember this is the gh-page branch)\n$ git add .\n$ git commit --allow-empty -m \"Initial empty branch\"\n\n# Push the branch\n$ git push origin gh-pages\n`;\n\nconst setupGitWorkTree = `# Go back to master\n$ git checkout master\n\n# Create the Git Worktree\n$ git worktree add out gh-pages`;\n\nconst updateGhPages = `# Build and generate an export\n$ yarn build\n$ yarn export\n\n# Push the update site to GitHub pages\n$ cd ./out\n$ git add .\n$ git commit -m \"Deploy to gh-pages ðŸš€\"\n$ git push origin gh-pages\n`;\n\nexport default withPostProps(({ post }) => (\n    <Post post={ post }>\n        <div className=\"constrained\">\n            <p>So, you've built an amazing Next.js site. But where do you host it?</p>\n            <p>For free, on GitHub pages of course ðŸ˜€</p>\n            <p>There's always a caveat... this only works if you can statically export your site. <External href=\"https://nextjs.org/docs/#static-html-export\">Read more about it on next.js</External>. If you can, then you're good to go.</p>\n            <p><External href=\"https://nextjs.org/docs/#usage\">Follow the steps</External> to create <Inline>exportPathMap</Inline> in <Inline>next.config.js</Inline> add <Inline>next build</Inline> and <Inline>next export</Inline> scripts to <Inline>package.json</Inline>.</p>\n            <p>You should have an <Inline>./out</Inline> directory with your entire website in it.</p>\n            <Bonus>I use the <Inline>serve</Inline> module to test the <Inline>out</Inline> directory has everything it needs. Make sure you test loading specific URLs to ensure a direct page load works (versus client side navigation).</Bonus>\n            <p>Now comes the tricky part... setting up GitHub pages.</p>\n            <p>Actually, it's not too confusing unless you want to set up a custom domain. I found their documentation mind boggling; due to the fact there are quite a few different types of GitHub repositories including organisation, user and projects.</p>\n            <p>Here is how it's going to work.</p>\n            <p>We'll exclude the <Inline>out</Inline> directory from Git. We'll then use a <External href=\"https://git-scm.com/docs/git-worktree\">Git Worktree</External> to create a kind of alias between the <Inline>out</Inline> directory and the <Inline>gh-pages</Inline> branch.</p>\n            <p>Okay, let's get started by preparing the <Inline>out</Inline> directory:</p>\n            <SyntaxHighlighter language=\"shell\" style={ prism }>{ setupOut }</SyntaxHighlighter>\n            <p>Now we can create the Git worktree:</p>\n            <SyntaxHighlighter language=\"shell\" style={ prism }>{ setupGitWorkTree }</SyntaxHighlighter>\n            <p>Let's take a moment here to explore this...</p>\n            <p>If you run <Inline>git branch</Inline> you should be on <Inline>master</Inline>. Now change into the <Inline>out</Inline> directory and run <Inline>git branch</Inline>, you should be on the <Inline>gh-pages</Inline> branch. So the <Inline>out</Inline> directory has been directly aliased to the <Inline>gh-pages</Inline> directory. That's kinda neat.</p>\n            <p>Do the following every time you want to deploy a new version of the site:</p>\n            <SyntaxHighlighter language=\"shell\" style={ prism }>{ updateGhPages }</SyntaxHighlighter>\n        </div>\n    </Post>\n));"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAspBA;;;;A","sourceRoot":""}